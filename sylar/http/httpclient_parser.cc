
#line 1 "httpclient_parser.rl"
/**
*
* Copyright (c) 2010, Zed A. Shaw and Mongrel2 Project Contributors.
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
* 
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
* 
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
* 
*     * Neither the name of the Mongrel2 Project, Zed A. Shaw, nor the names
*       of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written
*       permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "httpclient_parser.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <cerrno>
//#include "dbg.h"

#define LEN(AT, FPC) (FPC - buffer - parser->AT)
#define MARK(M,FPC) (parser->M = (FPC) - buffer)
#define PTR_TO(F) (buffer + parser->F)
#define check(A, M, ...) if(!(A)) { /*log_err(M, ##__VA_ARGS__);*/ errno=0; goto error; }


/** machine **/

#line 157 "httpclient_parser.rl"


/** Data **/

static const char _httpclient_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1,
	3, 1, 5, 1, 6, 1, 7, 1,
	8, 1, 9, 1, 10, 1, 11, 1,
	12, 2, 2, 3, 2, 3, 1, 2,
	3, 6, 2, 4, 6, 2, 5, 1,
	2, 5, 12, 2, 6, 11, 2, 6,
	12, 2, 10, 12, 3, 2, 3, 6,
	4, 2, 3, 6, 12, 0
};

static const short _httpclient_parser_key_offsets[] = {
	0, 0, 7, 16, 17, 32, 51, 66,
	84, 85, 86, 87, 88, 90, 93, 95,
	98, 100, 103, 104, 106, 127, 143, 148,
	150, 151, 169, 187, 207, 225, 243, 261,
	279, 297, 315, 331, 338, 362, 367, 369,
	371, 373, 375, 377, 398, 416, 434, 452,
	470, 488, 506, 524, 540, 558, 576, 594,
	612, 630, 648, 666, 684, 700, 707, 731,
	736, 738, 740, 742, 744, 746, 748, 750,
	751, 757, 777, 795, 813, 831, 849, 867,
	885, 891, 895, 899, 903, 907, 911, 915,
	917, 918, 924, 944, 962, 980, 998, 1016,
	1022, 1026, 1030, 1034, 1038, 1040, 1058, 1076,
	1094, 1110, 1128, 1146, 1164, 1182, 1200, 1218,
	1234, 1241, 1265, 1270, 1274, 1280, 1298, 1304,
	1308, 1308, 1313, 1318, 0
};

static const char _httpclient_parser_trans_keys[] = {
	72, 48, 57, 65, 70, 97, 102, 10,
	13, 59, 48, 57, 65, 70, 97, 102,
	10, 33, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	10, 13, 33, 59, 61, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 33, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 10, 13, 33, 59, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 84, 84, 80, 47,
	48, 57, 46, 48, 57, 48, 57, 32,
	48, 57, 48, 57, 32, 48, 57, 10,
	10, 13, 10, 13, 33, 67, 84, 99,
	116, 124, 126, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 33,
	58, 124, 126, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 10,
	13, 32, 9, 12, 10, 13, 10, 33,
	58, 79, 111, 124, 126, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 33, 58, 78, 110, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 33, 58, 78, 84, 110,
	116, 124, 126, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 33,
	58, 69, 101, 124, 126, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 33, 58, 67, 99, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 33, 58, 84, 116, 124,
	126, 35, 39, 42, 43, 45, 46, 48,
	57, 65, 90, 94, 122, 33, 58, 73,
	105, 124, 126, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 33,
	58, 79, 111, 124, 126, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 33, 58, 78, 110, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 33, 58, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 10, 13, 32, 67, 99,
	9, 12, 10, 13, 32, 33, 67, 84,
	99, 116, 124, 126, 9, 12, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 32, 67, 99, 9, 13, 76,
	108, 79, 111, 83, 115, 69, 101, 10,
	13, 10, 13, 33, 67, 84, 99, 116,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 58,
	82, 114, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 65, 97, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 66, 90,
	94, 122, 33, 58, 78, 110, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 83, 115,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 58,
	70, 102, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 69, 101, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 82, 114, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 45, 46, 58,
	124, 126, 35, 39, 42, 43, 48, 57,
	65, 90, 94, 122, 33, 58, 69, 101,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 58,
	78, 110, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 67, 99, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 79, 111, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 68, 100,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 58,
	73, 105, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 78, 110, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 71, 103, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 10, 13, 32, 67,
	99, 9, 12, 10, 13, 32, 33, 67,
	84, 99, 116, 124, 126, 9, 12, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 32, 67, 99, 9, 13,
	72, 104, 85, 117, 78, 110, 75, 107,
	69, 101, 68, 100, 10, 13, 10, 10,
	32, 67, 99, 9, 13, 33, 58, 72,
	79, 104, 111, 124, 126, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 33, 58, 85, 117, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 33, 58, 78, 110, 124,
	126, 35, 39, 42, 43, 45, 46, 48,
	57, 65, 90, 94, 122, 33, 58, 75,
	107, 124, 126, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 33,
	58, 69, 101, 124, 126, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 33, 58, 68, 100, 124, 126, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 10, 13, 33, 58, 124,
	126, 35, 39, 42, 43, 45, 46, 48,
	57, 65, 90, 94, 122, 10, 32, 67,
	99, 9, 13, 10, 13, 72, 104, 10,
	13, 85, 117, 10, 13, 78, 110, 10,
	13, 75, 107, 10, 13, 69, 101, 10,
	13, 68, 100, 10, 13, 10, 10, 32,
	67, 99, 9, 13, 33, 58, 76, 79,
	108, 111, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 79, 111, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 83, 115, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 69, 101,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 10, 13,
	33, 58, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	10, 32, 67, 99, 9, 13, 10, 13,
	76, 108, 10, 13, 79, 111, 10, 13,
	83, 115, 10, 13, 69, 101, 10, 13,
	33, 58, 69, 101, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 78, 110, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 84, 116,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 45,
	46, 58, 124, 126, 35, 39, 42, 43,
	48, 57, 65, 90, 94, 122, 33, 58,
	76, 108, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 69, 101, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 78, 110, 124, 126,
	35, 39, 42, 43, 45, 46, 48, 57,
	65, 90, 94, 122, 33, 58, 71, 103,
	124, 126, 35, 39, 42, 43, 45, 46,
	48, 57, 65, 90, 94, 122, 33, 58,
	84, 116, 124, 126, 35, 39, 42, 43,
	45, 46, 48, 57, 65, 90, 94, 122,
	33, 58, 72, 104, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 33, 58, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 10, 13, 32, 9, 12, 48,
	57, 10, 13, 32, 33, 67, 84, 99,
	116, 124, 126, 9, 12, 35, 39, 42,
	43, 45, 46, 48, 57, 65, 90, 94,
	122, 32, 9, 13, 48, 57, 10, 13,
	48, 57, 10, 32, 9, 13, 48, 57,
	10, 13, 33, 58, 124, 126, 35, 39,
	42, 43, 45, 46, 48, 57, 65, 90,
	94, 122, 10, 32, 9, 13, 48, 57,
	10, 13, 48, 57, 32, 67, 99, 9,
	13, 32, 67, 99, 9, 13, 32, 9,
	13, 48, 57, 0
};

static const char _httpclient_parser_single_lengths[] = {
	0, 1, 3, 1, 3, 7, 3, 6,
	1, 1, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 2, 9, 4, 3, 2,
	1, 6, 6, 8, 6, 6, 6, 6,
	6, 6, 4, 5, 10, 3, 2, 2,
	2, 2, 2, 9, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 4, 5, 10, 3,
	2, 2, 2, 2, 2, 2, 2, 1,
	4, 8, 6, 6, 6, 6, 6, 6,
	4, 4, 4, 4, 4, 4, 4, 2,
	1, 4, 8, 6, 6, 6, 6, 4,
	4, 4, 4, 4, 2, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 4,
	3, 10, 1, 2, 2, 6, 2, 2,
	0, 3, 3, 1, 0
};

static const char _httpclient_parser_range_lengths[] = {
	0, 3, 3, 0, 6, 6, 6, 6,
	0, 0, 0, 0, 1, 1, 1, 1,
	1, 1, 0, 0, 6, 6, 1, 0,
	0, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 7, 1, 0, 0,
	0, 0, 0, 6, 6, 6, 6, 6,
	6, 6, 6, 5, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 7, 1,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 6, 6, 6, 6, 6, 6, 6,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 6, 6, 6, 6, 6, 1,
	0, 0, 0, 0, 0, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6,
	2, 7, 2, 1, 2, 6, 2, 1,
	0, 1, 1, 2, 0
};

static const short _httpclient_parser_index_offsets[] = {
	0, 0, 5, 12, 14, 24, 38, 48,
	61, 63, 65, 67, 69, 71, 74, 76,
	79, 81, 84, 86, 89, 105, 116, 121,
	124, 126, 139, 152, 167, 180, 193, 206,
	219, 232, 245, 256, 263, 281, 286, 289,
	292, 295, 298, 301, 317, 330, 343, 356,
	369, 382, 395, 408, 420, 433, 446, 459,
	472, 485, 498, 511, 524, 535, 542, 560,
	565, 568, 571, 574, 577, 580, 583, 586,
	588, 594, 609, 622, 635, 648, 661, 674,
	687, 693, 698, 703, 708, 713, 718, 723,
	726, 728, 734, 749, 762, 775, 788, 801,
	807, 812, 817, 822, 827, 830, 843, 856,
	869, 881, 894, 907, 920, 933, 946, 959,
	970, 976, 994, 998, 1002, 1007, 1020, 1025,
	1029, 1030, 1035, 1040, 0
};

static const char _httpclient_parser_trans_cond_spaces[] = {
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 0
};

static const short _httpclient_parser_trans_offsets[] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 0
};

static const char _httpclient_parser_trans_lengths[] = {
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0
};

static const char _httpclient_parser_cond_keys[] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0
};

static const char _httpclient_parser_cond_targs[] = {
	8, 2, 2, 2, 0, 120, 3, 4,
	2, 2, 2, 0, 120, 0, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 0,
	120, 3, 5, 4, 6, 5, 5, 5,
	5, 5, 5, 5, 5, 0, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 0,
	120, 3, 7, 4, 7, 7, 7, 7,
	7, 7, 7, 7, 0, 9, 0, 10,
	0, 11, 0, 12, 0, 13, 0, 14,
	13, 0, 15, 0, 16, 15, 0, 17,
	0, 18, 17, 0, 0, 19, 20, 24,
	19, 120, 3, 21, 25, 44, 25, 44,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 21, 21, 21, 21, 21,
	21, 21, 21, 0, 20, 24, 22, 22,
	23, 20, 24, 23, 20, 0, 21, 22,
	26, 26, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 27, 27, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 28, 101, 28, 101, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 21,
	22, 29, 29, 21, 21, 21, 21, 21,
	21, 21, 21, 0, 21, 22, 30, 30,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 31, 31, 21, 21, 21,
	21, 21, 21, 21, 21, 0, 21, 22,
	32, 32, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 33, 33, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 34, 34, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 35, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	36, 95, 35, 96, 96, 35, 23, 122,
	89, 37, 21, 90, 44, 90, 44, 21,
	21, 37, 21, 21, 21, 21, 21, 21,
	0, 37, 38, 38, 37, 0, 39, 39,
	0, 40, 40, 0, 41, 41, 0, 42,
	42, 0, 43, 88, 0, 120, 3, 21,
	25, 44, 25, 44, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 22, 45,
	45, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 21, 22, 46, 46, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 21,
	22, 47, 47, 21, 21, 21, 21, 21,
	21, 21, 21, 0, 21, 22, 48, 48,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 49, 49, 21, 21, 21,
	21, 21, 21, 21, 21, 0, 21, 22,
	50, 50, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 51, 51, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 52, 21, 22, 21, 21, 21, 21,
	21, 21, 21, 0, 21, 22, 53, 53,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 54, 54, 21, 21, 21,
	21, 21, 21, 21, 21, 0, 21, 22,
	55, 55, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 56, 56, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 57, 57, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 22, 58,
	58, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 21, 22, 59, 59, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 21,
	22, 60, 60, 21, 21, 21, 21, 21,
	21, 21, 21, 0, 21, 61, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 62,
	80, 61, 81, 81, 61, 23, 121, 72,
	63, 21, 73, 44, 73, 44, 21, 21,
	63, 21, 21, 21, 21, 21, 21, 0,
	63, 64, 64, 63, 0, 65, 65, 0,
	66, 66, 0, 67, 67, 0, 68, 68,
	0, 69, 69, 0, 70, 70, 0, 20,
	71, 0, 20, 0, 121, 63, 64, 64,
	63, 0, 21, 22, 74, 26, 74, 26,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 75, 75, 21, 21, 21,
	21, 21, 21, 21, 21, 0, 21, 22,
	76, 76, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 77, 77, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 78, 78, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 22, 79,
	79, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 20, 71, 21, 22, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 62,
	63, 64, 64, 63, 0, 20, 24, 82,
	82, 23, 20, 24, 83, 83, 23, 20,
	24, 84, 84, 23, 20, 24, 85, 85,
	23, 20, 24, 86, 86, 23, 20, 24,
	87, 87, 23, 20, 71, 23, 43, 0,
	122, 37, 38, 38, 37, 0, 21, 22,
	91, 26, 91, 26, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 22, 92,
	92, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 21, 22, 93, 93, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 21,
	22, 94, 94, 21, 21, 21, 21, 21,
	21, 21, 21, 0, 43, 88, 21, 22,
	21, 21, 21, 21, 21, 21, 21, 21,
	0, 36, 37, 38, 38, 37, 0, 20,
	24, 97, 97, 23, 20, 24, 98, 98,
	23, 20, 24, 99, 99, 23, 20, 24,
	100, 100, 23, 43, 88, 23, 21, 22,
	102, 102, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 103, 103, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 104, 104, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 105, 21,
	22, 21, 21, 21, 21, 21, 21, 21,
	0, 21, 22, 106, 106, 21, 21, 21,
	21, 21, 21, 21, 21, 0, 21, 22,
	107, 107, 21, 21, 21, 21, 21, 21,
	21, 21, 0, 21, 22, 108, 108, 21,
	21, 21, 21, 21, 21, 21, 21, 0,
	21, 22, 109, 109, 21, 21, 21, 21,
	21, 21, 21, 21, 0, 21, 22, 110,
	110, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 21, 22, 111, 111, 21, 21,
	21, 21, 21, 21, 21, 21, 0, 21,
	112, 21, 21, 21, 21, 21, 21, 21,
	21, 0, 113, 118, 112, 112, 119, 23,
	123, 116, 114, 21, 25, 44, 25, 44,
	21, 21, 114, 21, 21, 21, 117, 21,
	21, 0, 114, 114, 115, 0, 20, 24,
	115, 0, 123, 114, 114, 115, 0, 20,
	24, 21, 22, 21, 21, 21, 21, 21,
	117, 21, 21, 0, 113, 114, 114, 115,
	0, 20, 24, 119, 23, 0, 63, 64,
	64, 63, 0, 37, 38, 38, 37, 0,
	114, 114, 115, 0, 0
};

static const char _httpclient_parser_cond_actions[] = {
	1, 1, 1, 1, 0, 49, 19, 19,
	0, 0, 0, 0, 23, 0, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 0,
	56, 52, 0, 52, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 0,
	46, 11, 0, 11, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 17, 0, 0, 1,
	0, 15, 0, 0, 0, 1, 13, 13,
	0, 23, 0, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 31, 7, 7,
	7, 11, 11, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	31, 31, 7, 7, 7, 7, 7, 23,
	0, 0, 3, 3, 3, 3, 3, 3,
	3, 0, 3, 3, 3, 3, 3, 3,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 9, 37,
	37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 31,
	31, 7, 7, 7, 7, 7, 23, 0,
	0, 3, 28, 3, 28, 3, 3, 3,
	0, 3, 3, 3, 3, 3, 3, 0,
	0, 7, 7, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43,
	11, 0, 21, 0, 23, 0, 7, 7,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 11, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 7, 7, 0, 0, 11, 11, 0,
	0, 0, 11, 11, 0, 0, 0, 11,
	11, 0, 0, 0, 11, 11, 0, 0,
	0, 11, 11, 0, 0, 0, 11, 11,
	0, 0, 0, 43, 11, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 11,
	11, 0, 0, 0, 11, 11, 0, 0,
	0, 11, 11, 0, 0, 0, 11, 11,
	0, 0, 0, 11, 11, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 5,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	5, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 31, 7, 7, 7, 7,
	23, 0, 0, 3, 3, 3, 3, 3,
	3, 3, 0, 3, 3, 3, 28, 3,
	3, 0, 0, 0, 7, 0, 34, 34,
	0, 0, 23, 0, 0, 7, 0, 34,
	34, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 7,
	0, 34, 34, 0, 0, 0, 0, 7,
	7, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 7, 0, 0
};

static const char _httpclient_parser_nfa_targs[] = {
	0, 0
};

static const char _httpclient_parser_nfa_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0
};

static const char _httpclient_parser_nfa_push_actions[] = {
	0, 0
};

static const char _httpclient_parser_nfa_pop_trans[] = {
	0, 0
};

static const int httpclient_parser_start = 1;
static const int httpclient_parser_first_final = 120;
static const int httpclient_parser_error = 0;

static const int httpclient_parser_en_main = 1;


#line 161 "httpclient_parser.rl"


int httpclient_parser_init(httpclient_parser *parser)  {
	int cs = 0;
	
	
	{
		cs = (int)httpclient_parser_start;
	}
	
	#line 166 "httpclient_parser.rl"
	
	
	parser->cs = cs;
	parser->body_start = 0;
	parser->content_len = -1;
	parser->chunked = 0;
	parser->chunks_done = 0;
	parser->mark = 0;
	parser->nread = 0;
	parser->field_len = 0;
	parser->field_start = 0;    
	parser->close = 0;
	
	return(1);
}


/** exec **/
int httpclient_parser_execute(httpclient_parser *parser, const char *buffer, size_t len, size_t off)  
{
	parser->nread = 0;
	parser->mark = 0;
	parser->field_len = 0;
	parser->field_start = 0;
	
	const char *p, *pe;
	int cs = parser->cs;
	
	assert(off <= len && "offset past end of buffer");
	
	p = buffer+off;
	pe = buffer+len;
	
	assert(*pe == '\0' && "pointer does not end on NUL");
	assert(pe - p == (int)len - (int)off && "pointers aren't same distance");
	
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char *_acts;
		unsigned int _nacts;
		const char *_keys;
		const char *_ckeys;
		int _cpc;
		{
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			_resume:  {
				_keys = ( _httpclient_parser_trans_keys + (_httpclient_parser_key_offsets[cs]));
				_trans = (unsigned int)_httpclient_parser_index_offsets[cs];
				
				_klen = (int)_httpclient_parser_single_lengths[cs];
				if ( _klen > 0 ) {
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( (*( p))) < (*( _mid)) )
						_upper = _mid - 1;
						else if ( ( (*( p))) > (*( _mid)) )
						_lower = _mid + 1;
						else {
							_trans += (unsigned int)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += (unsigned int)_klen;
				}
				
				_klen = (int)_httpclient_parser_range_lengths[cs];
				if ( _klen > 0 ) {
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( (*( p))) < (*( _mid)) )
						_upper = _mid - 2;
						else if ( ( (*( p))) > (*( _mid + 1)) )
						_lower = _mid + 2;
						else {
							_trans += (unsigned int)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += (unsigned int)_klen;
				}
				
			}
			_match:  {
				_ckeys = ( _httpclient_parser_cond_keys + (_httpclient_parser_trans_offsets[_trans]));
				_klen = (int)_httpclient_parser_trans_lengths[_trans];
				_cond = (unsigned int)_httpclient_parser_trans_offsets[_trans];
				
				_cpc = 0;
				{
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < (int)(*( _mid)) )
						_upper = _mid - 1;
						else if ( _cpc > (int)(*( _mid)) )
						_lower = _mid + 1;
						else {
							_cond += (unsigned int)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			_match_cond:  {
				cs = (int)_httpclient_parser_cond_targs[_cond];
				
				if ( _httpclient_parser_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = ( _httpclient_parser_actions + (_httpclient_parser_cond_actions[_cond]));
				_nacts = (unsigned int)(*( _acts));
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( (*( _acts)) )
					{
						case 0:  {
							{
								#line 54 "httpclient_parser.rl"
								MARK(mark, p); }
							break; }
						case 1:  {
							{
								#line 56 "httpclient_parser.rl"
								MARK(field_start, p); }
							break; }
						case 2:  {
							{
								#line 58 "httpclient_parser.rl"
								
								parser->field_len = LEN(field_start, p);
							}
							break; }
						case 3:  {
							{
								#line 62 "httpclient_parser.rl"
								MARK(mark, p); }
							break; }
						case 4:  {
							{
								#line 64 "httpclient_parser.rl"
								
								parser->content_len = strtol(PTR_TO(mark), NULL, 10);
							}
							break; }
						case 5:  {
							{
								#line 68 "httpclient_parser.rl"
								
								parser->close = 1;
							}
							break; }
						case 6:  {
							{
								#line 72 "httpclient_parser.rl"
								
								if(parser->http_field != NULL) {
									parser->http_field(parser->data, PTR_TO(field_start), parser->field_len, PTR_TO(mark), LEN(mark, p));
								}
							}
							break; }
						case 7:  {
							{
								#line 78 "httpclient_parser.rl"
								
								if(parser->reason_phrase != NULL)
								parser->reason_phrase(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 8:  {
							{
								#line 83 "httpclient_parser.rl"
								
								parser->status = strtol(PTR_TO(mark), NULL, 10);
								
								if(parser->status_code != NULL)
								parser->status_code(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 9:  {
							{
								#line 90 "httpclient_parser.rl"
								
								if(parser->http_version != NULL)
								parser->http_version(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 10:  {
							{
								#line 95 "httpclient_parser.rl"
								
								parser->chunked = 1;
								parser->content_len = strtol(PTR_TO(mark), NULL, 16);
								parser->chunks_done = parser->content_len <= 0;
								
								if(parser->chunks_done && parser->last_chunk) {
									parser->last_chunk(parser->data, PTR_TO(mark), LEN(mark, p));
								} else if(parser->chunk_size != NULL) {
									parser->chunk_size(parser->data, PTR_TO(mark), LEN(mark, p));
								} // else skip it
							}
							break; }
						case 11:  {
							{
								#line 107 "httpclient_parser.rl"
								
								parser->chunked = 1;
							}
							break; }
						case 12:  {
							{
								#line 111 "httpclient_parser.rl"
								
								parser->body_start = p - buffer + 1; 
								if(parser->header_done != NULL)
								parser->header_done(parser->data, p + 1, pe - p - 1);
								{p+= 1; goto _out; }
							}
							break; }
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			_again:  {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			_test_eof:  { {}
			}
			_out:  { {}
			}
		}
	}
	
	#line 203 "httpclient_parser.rl"
	
	
	parser->cs = cs;
	parser->nread += p - (buffer + off);
	
	assert(p <= pe && "buffer overflow after parsing execute");
	assert(parser->nread <= len && "nread longer than length");
	assert(parser->body_start <= len && "body starts after buffer end");
	check(parser->mark < len, "mark is after buffer end");
	check(parser->field_len <= len, "field has length longer than whole buffer");
	check(parser->field_start < len, "field starts after buffer end");
	
	//if(parser->body_start) {
		//    /* final \r\n combo encountered so stop right here */
		//    parser->nread++;
		//}
	
	return(parser->nread);
	
	error:
	return -1;
}

int httpclient_parser_finish(httpclient_parser *parser)
{
	int cs = parser->cs;
	
	parser->cs = cs;
	
	if (httpclient_parser_has_error(parser) ) {
		return -1;
	} else if (httpclient_parser_is_finished(parser) ) {
		return 1;
	} else {
		return 0;
	}
}

int httpclient_parser_has_error(httpclient_parser *parser) {
	return parser->cs == httpclient_parser_error;
}

int httpclient_parser_is_finished(httpclient_parser *parser) {
	return parser->cs == httpclient_parser_first_final;
}

