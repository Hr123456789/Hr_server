
#line 1 "http11_parser.rl"
/**
*
* Copyright (c) 2010, Zed A. Shaw and Mongrel2 Project Contributors.
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
* 
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
* 
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
* 
*     * Neither the name of the Mongrel2 Project, Zed A. Shaw, nor the names
*       of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written
*       permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "http11_parser.h"
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
//#include <dbg.h>

#define LEN(AT, FPC) (FPC - buffer - parser->AT)
#define MARK(M,FPC) (parser->M = (FPC) - buffer)
#define PTR_TO(F) (buffer + parser->F)

/** Machine **/


#line 257 "http11_parser.rl"


/** Data **/

static const char _http_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1,
	3, 1, 4, 1, 5, 1, 7, 1,
	8, 1, 10, 1, 11, 1, 12, 2,
	0, 7, 2, 0, 11, 2, 1, 12,
	2, 3, 4, 2, 9, 6, 2, 11,
	6, 2, 13, 12, 2, 14, 12, 3,
	0, 11, 6, 3, 8, 9, 6, 0
};

static const short _http_parser_key_offsets[] = {
	0, 0, 6, 11, 31, 32, 33, 34,
	35, 36, 37, 38, 40, 42, 63, 83,
	89, 93, 94, 115, 134, 150, 166, 172,
	178, 184, 190, 207, 213, 219, 235, 251,
	257, 263, 281, 302, 322, 328, 334, 357,
	374, 380, 386, 406, 425, 431, 437, 443,
	452, 458, 465, 472, 479, 480, 488, 496,
	500, 501, 505, 506, 510, 511, 516, 519,
	522, 525, 527, 528, 531, 534, 537, 539,
	540, 543, 546, 549, 551, 552, 559, 566,
	567, 573, 580, 587, 594, 602, 610, 618,
	628, 635, 643, 650, 657, 664, 671, 672,
	679, 686, 693, 700, 701, 708, 715, 722,
	729, 730, 737, 744, 751, 758, 759, 766,
	773, 780, 787, 788, 795, 802, 809, 816,
	817, 824, 831, 838, 845, 846, 853, 864,
	873, 881, 889, 891, 899, 908, 916, 924,
	926, 935, 944, 953, 964, 972, 981, 989,
	998, 1007, 1016, 1027, 1035, 1044, 1052, 1062,
	1072, 1080, 1087, 1094, 1095, 1103, 1111, 1119,
	1129, 1136, 1144, 1151, 1159, 1161, 1162, 1163,
	1164, 1175, 1181, 1188, 1204, 1221, 1245, 1263,
	1268, 1273, 1278, 1283, 1288, 1293, 1298, 1303,
	1308, 1313, 1318, 1323, 1328, 1333, 1338, 1343,
	1348, 1353, 1354, 1362, 1373, 1374, 1376, 1393,
	1394, 1395, 1397, 1414, 1420, 1426, 1443, 1449,
	1455, 1473, 1492, 1510, 1516, 1522, 1543, 1560,
	1566, 1572, 1590, 1607, 1613, 1619, 1623, 1632,
	1638, 1645, 1652, 1659, 1660, 1668, 1676, 1680,
	1681, 1685, 1686, 1690, 1691, 1694, 1697, 1700,
	1703, 1705, 1706, 1709, 1712, 1715, 1717, 1718,
	1721, 1724, 1727, 1729, 1730, 1737, 1744, 1745,
	1751, 1758, 1765, 1772, 1780, 1788, 1796, 1806,
	1813, 1821, 1828, 1835, 1842, 1849, 1850, 1857,
	1864, 1871, 1878, 1879, 1886, 1893, 1900, 1907,
	1908, 1915, 1922, 1929, 1936, 1937, 1944, 1951,
	1958, 1965, 1966, 1973, 1980, 1987, 1994, 1995,
	2002, 2009, 2016, 2023, 2024, 2031, 2042, 2051,
	2059, 2067, 2069, 2077, 2086, 2094, 2102, 2104,
	2113, 2122, 2131, 2142, 2150, 2159, 2167, 2176,
	2185, 2194, 2205, 2213, 2222, 2230, 2240, 2250,
	2258, 2265, 2272, 2273, 2281, 2289, 2297, 2307,
	2314, 2322, 2329, 2337, 2339, 2340, 2341, 2342,
	2353, 2359, 2366, 2382, 2399, 2419, 0
};

static const char _http_parser_trans_keys[] = {
	60, 64, 48, 57, 65, 90, 32, 48,
	57, 65, 90, 32, 33, 35, 37, 47,
	59, 61, 63, 64, 94, 95, 123, 125,
	126, 36, 57, 65, 90, 97, 122, 72,
	84, 84, 80, 47, 49, 46, 48, 49,
	10, 13, 10, 13, 33, 124, 126, 1,
	8, 11, 31, 35, 39, 42, 43, 45,
	46, 48, 57, 65, 90, 94, 122, 33,
	58, 124, 126, 1, 8, 10, 31, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 0, 9, 10, 13, 32,
	127, 0, 10, 13, 127, 10, 10, 33,
	58, 124, 126, 1, 8, 11, 31, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 32, 33, 35, 37, 47,
	59, 61, 63, 94, 95, 123, 125, 126,
	36, 57, 64, 90, 97, 122, 32, 37,
	60, 62, 94, 96, 124, 127, 0, 31,
	34, 35, 91, 93, 123, 125, 32, 37,
	60, 62, 94, 96, 124, 127, 0, 31,
	34, 35, 91, 93, 123, 125, 48, 57,
	65, 70, 97, 102, 48, 57, 65, 70,
	97, 102, 48, 57, 65, 70, 97, 102,
	48, 57, 65, 70, 97, 102, 32, 34,
	35, 37, 60, 62, 63, 94, 96, 124,
	127, 0, 31, 91, 93, 123, 125, 48,
	57, 65, 70, 97, 102, 48, 57, 65,
	70, 97, 102, 32, 34, 35, 37, 60,
	62, 94, 96, 124, 127, 0, 31, 91,
	93, 123, 125, 32, 34, 35, 37, 60,
	62, 94, 96, 124, 127, 0, 31, 91,
	93, 123, 125, 48, 57, 65, 70, 97,
	102, 48, 57, 65, 70, 97, 102, 32,
	34, 35, 37, 47, 60, 62, 63, 94,
	96, 124, 127, 0, 31, 91, 93, 123,
	125, 32, 33, 35, 37, 47, 58, 61,
	63, 64, 91, 94, 95, 123, 125, 126,
	36, 59, 65, 90, 97, 122, 32, 33,
	35, 37, 47, 58, 61, 63, 64, 94,
	95, 123, 125, 126, 36, 59, 65, 90,
	97, 122, 48, 57, 65, 70, 97, 102,
	48, 57, 65, 70, 97, 102, 32, 33,
	35, 37, 47, 61, 63, 64, 94, 95,
	123, 125, 126, 36, 46, 48, 57, 58,
	59, 65, 90, 97, 122, 33, 37, 61,
	64, 94, 95, 123, 125, 126, 36, 46,
	48, 59, 65, 90, 97, 122, 48, 57,
	65, 70, 97, 102, 48, 57, 65, 70,
	97, 102, 32, 33, 35, 37, 47, 58,
	61, 63, 91, 94, 95, 123, 125, 126,
	36, 59, 65, 90, 97, 122, 32, 33,
	35, 37, 47, 58, 61, 63, 94, 95,
	123, 125, 126, 36, 59, 65, 90, 97,
	122, 48, 57, 65, 70, 97, 102, 48,
	57, 65, 70, 97, 102, 32, 35, 47,
	63, 48, 57, 6, 58, 118, 48, 57,
	65, 70, 97, 102, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	49, 50, 48, 57, 65, 70, 97, 102,
	46, 58, 48, 57, 65, 70, 97, 102,
	49, 50, 48, 57, 46, 49, 50, 48,
	57, 46, 49, 50, 48, 57, 93, 32,
	35, 47, 58, 63, 93, 48, 57, 93,
	48, 57, 48, 53, 93, 48, 57, 48,
	46, 48, 57, 46, 48, 57, 46, 48,
	53, 48, 57, 48, 46, 48, 57, 46,
	48, 57, 46, 48, 53, 48, 57, 48,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 93, 48, 57,
	65, 70, 97, 102, 93, 48, 57, 65,
	70, 97, 102, 93, 48, 57, 65, 70,
	97, 102, 46, 58, 48, 57, 65, 70,
	97, 102, 46, 58, 48, 57, 65, 70,
	97, 102, 46, 58, 48, 57, 65, 70,
	97, 102, 46, 48, 53, 58, 49, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 48, 58, 49, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 58, 48, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 58, 48,
	57, 65, 70, 97, 102, 49, 50, 93,
	2, 3, 48, 57, 65, 70, 97, 102,
	46, 58, 93, 48, 57, 65, 70, 97,
	102, 58, 93, 48, 57, 65, 70, 97,
	102, 58, 93, 48, 57, 65, 70, 97,
	102, 58, 93, 49, 50, 48, 57, 65,
	70, 97, 102, 46, 58, 93, 48, 57,
	65, 70, 97, 102, 58, 93, 48, 57,
	65, 70, 97, 102, 58, 93, 48, 57,
	65, 70, 97, 102, 58, 93, 46, 58,
	93, 48, 57, 65, 70, 97, 102, 46,
	58, 93, 48, 57, 65, 70, 97, 102,
	46, 58, 93, 48, 57, 65, 70, 97,
	102, 46, 48, 53, 58, 93, 49, 57,
	65, 70, 97, 102, 58, 93, 48, 57,
	65, 70, 97, 102, 48, 58, 93, 49,
	57, 65, 70, 97, 102, 58, 93, 48,
	57, 65, 70, 97, 102, 46, 58, 93,
	48, 57, 65, 70, 97, 102, 46, 58,
	93, 48, 57, 65, 70, 97, 102, 46,
	58, 93, 48, 57, 65, 70, 97, 102,
	46, 48, 53, 58, 93, 49, 57, 65,
	70, 97, 102, 58, 93, 48, 57, 65,
	70, 97, 102, 48, 58, 93, 49, 57,
	65, 70, 97, 102, 58, 93, 48, 57,
	65, 70, 97, 102, 49, 50, 2, 3,
	48, 57, 65, 70, 97, 102, 49, 50,
	2, 3, 48, 57, 65, 70, 97, 102,
	46, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 46,
	58, 48, 57, 65, 70, 97, 102, 46,
	58, 48, 57, 65, 70, 97, 102, 46,
	58, 48, 57, 65, 70, 97, 102, 46,
	48, 53, 58, 49, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	48, 58, 49, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 2,
	3, 48, 57, 65, 70, 97, 102, 2,
	3, 3, 4, 58, 49, 50, 93, 2,
	5, 48, 57, 65, 70, 97, 102, 48,
	57, 65, 70, 97, 102, 46, 48, 57,
	65, 70, 97, 102, 33, 36, 61, 94,
	95, 123, 125, 126, 38, 46, 48, 59,
	65, 90, 97, 122, 33, 36, 61, 93,
	94, 95, 123, 125, 126, 38, 46, 48,
	59, 65, 90, 97, 122, 32, 33, 35,
	37, 43, 47, 58, 59, 61, 63, 64,
	94, 95, 123, 125, 126, 36, 44, 45,
	57, 65, 90, 97, 122, 32, 34, 35,
	37, 47, 60, 62, 63, 94, 96, 124,
	127, 0, 31, 91, 93, 123, 125, 32,
	48, 57, 65, 90, 32, 48, 57, 65,
	90, 32, 48, 57, 65, 90, 32, 48,
	57, 65, 90, 32, 48, 57, 65, 90,
	32, 48, 57, 65, 90, 32, 48, 57,
	65, 90, 32, 48, 57, 65, 90, 32,
	48, 57, 65, 90, 32, 48, 57, 65,
	90, 32, 48, 57, 65, 90, 32, 48,
	57, 65, 90, 32, 48, 57, 65, 90,
	32, 48, 57, 65, 90, 32, 48, 57,
	65, 90, 32, 48, 57, 65, 90, 32,
	48, 57, 65, 90, 32, 48, 57, 65,
	90, 32, 45, 46, 48, 57, 65, 90,
	97, 122, 32, 47, 62, 9, 13, 45,
	57, 65, 90, 97, 122, 62, 0, 62,
	32, 33, 37, 47, 59, 61, 94, 95,
	123, 125, 126, 36, 57, 64, 90, 97,
	122, 123, 125, 0, 125, 32, 33, 37,
	47, 59, 61, 94, 95, 123, 125, 126,
	36, 57, 64, 90, 97, 122, 48, 57,
	65, 70, 97, 102, 48, 57, 65, 70,
	97, 102, 32, 37, 60, 94, 96, 124,
	127, 0, 31, 34, 35, 62, 63, 91,
	93, 123, 125, 48, 57, 65, 70, 97,
	102, 48, 57, 65, 70, 97, 102, 32,
	37, 47, 60, 94, 96, 124, 127, 0,
	31, 34, 35, 62, 63, 91, 93, 123,
	125, 32, 33, 37, 47, 58, 61, 64,
	91, 94, 95, 123, 125, 126, 36, 59,
	65, 90, 97, 122, 32, 33, 37, 47,
	58, 61, 64, 94, 95, 123, 125, 126,
	36, 59, 65, 90, 97, 122, 48, 57,
	65, 70, 97, 102, 48, 57, 65, 70,
	97, 102, 32, 33, 37, 47, 61, 64,
	94, 95, 123, 125, 126, 36, 46, 48,
	57, 58, 59, 65, 90, 97, 122, 33,
	37, 61, 64, 94, 95, 123, 125, 126,
	36, 46, 48, 59, 65, 90, 97, 122,
	48, 57, 65, 70, 97, 102, 48, 57,
	65, 70, 97, 102, 32, 33, 37, 47,
	58, 61, 91, 94, 95, 123, 125, 126,
	36, 59, 65, 90, 97, 122, 32, 33,
	37, 47, 58, 61, 94, 95, 123, 125,
	126, 36, 59, 65, 90, 97, 122, 48,
	57, 65, 70, 97, 102, 48, 57, 65,
	70, 97, 102, 32, 47, 48, 57, 6,
	58, 118, 48, 57, 65, 70, 97, 102,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 49, 50, 48, 57,
	65, 70, 97, 102, 46, 58, 48, 57,
	65, 70, 97, 102, 49, 50, 48, 57,
	46, 49, 50, 48, 57, 46, 49, 50,
	48, 57, 93, 32, 47, 58, 93, 48,
	57, 93, 48, 57, 48, 53, 93, 48,
	57, 48, 46, 48, 57, 46, 48, 57,
	46, 48, 53, 48, 57, 48, 46, 48,
	57, 46, 48, 57, 46, 48, 53, 48,
	57, 48, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 93,
	48, 57, 65, 70, 97, 102, 93, 48,
	57, 65, 70, 97, 102, 93, 48, 57,
	65, 70, 97, 102, 46, 58, 48, 57,
	65, 70, 97, 102, 46, 58, 48, 57,
	65, 70, 97, 102, 46, 58, 48, 57,
	65, 70, 97, 102, 46, 48, 53, 58,
	49, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 48, 58, 49,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 58, 48, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	48, 57, 65, 70, 97, 102, 58, 48,
	57, 65, 70, 97, 102, 58, 58, 48,
	57, 65, 70, 97, 102, 58, 48, 57,
	65, 70, 97, 102, 58, 48, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 58, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 48, 57, 65, 70, 97, 102, 58,
	58, 48, 57, 65, 70, 97, 102, 49,
	50, 93, 2, 3, 48, 57, 65, 70,
	97, 102, 46, 58, 93, 48, 57, 65,
	70, 97, 102, 58, 93, 48, 57, 65,
	70, 97, 102, 58, 93, 48, 57, 65,
	70, 97, 102, 58, 93, 49, 50, 48,
	57, 65, 70, 97, 102, 46, 58, 93,
	48, 57, 65, 70, 97, 102, 58, 93,
	48, 57, 65, 70, 97, 102, 58, 93,
	48, 57, 65, 70, 97, 102, 58, 93,
	46, 58, 93, 48, 57, 65, 70, 97,
	102, 46, 58, 93, 48, 57, 65, 70,
	97, 102, 46, 58, 93, 48, 57, 65,
	70, 97, 102, 46, 48, 53, 58, 93,
	49, 57, 65, 70, 97, 102, 58, 93,
	48, 57, 65, 70, 97, 102, 48, 58,
	93, 49, 57, 65, 70, 97, 102, 58,
	93, 48, 57, 65, 70, 97, 102, 46,
	58, 93, 48, 57, 65, 70, 97, 102,
	46, 58, 93, 48, 57, 65, 70, 97,
	102, 46, 58, 93, 48, 57, 65, 70,
	97, 102, 46, 48, 53, 58, 93, 49,
	57, 65, 70, 97, 102, 58, 93, 48,
	57, 65, 70, 97, 102, 48, 58, 93,
	49, 57, 65, 70, 97, 102, 58, 93,
	48, 57, 65, 70, 97, 102, 49, 50,
	2, 3, 48, 57, 65, 70, 97, 102,
	49, 50, 2, 3, 48, 57, 65, 70,
	97, 102, 46, 58, 48, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 58, 48, 57, 65, 70, 97, 102,
	58, 46, 58, 48, 57, 65, 70, 97,
	102, 46, 58, 48, 57, 65, 70, 97,
	102, 46, 58, 48, 57, 65, 70, 97,
	102, 46, 48, 53, 58, 49, 57, 65,
	70, 97, 102, 58, 48, 57, 65, 70,
	97, 102, 48, 58, 49, 57, 65, 70,
	97, 102, 58, 48, 57, 65, 70, 97,
	102, 2, 3, 48, 57, 65, 70, 97,
	102, 2, 3, 3, 4, 58, 49, 50,
	93, 2, 5, 48, 57, 65, 70, 97,
	102, 48, 57, 65, 70, 97, 102, 46,
	48, 57, 65, 70, 97, 102, 33, 36,
	61, 94, 95, 123, 125, 126, 38, 46,
	48, 59, 65, 90, 97, 122, 33, 36,
	61, 93, 94, 95, 123, 125, 126, 38,
	46, 48, 59, 65, 90, 97, 122, 33,
	58, 124, 126, 1, 8, 10, 31, 35,
	39, 42, 43, 45, 46, 48, 57, 65,
	90, 94, 122, 0
};

static const char _http_parser_single_lengths[] = {
	0, 2, 1, 14, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 4, 6,
	4, 1, 5, 13, 8, 8, 0, 0,
	0, 0, 11, 0, 0, 10, 10, 0,
	0, 12, 15, 14, 0, 0, 13, 9,
	0, 0, 14, 13, 0, 0, 4, 3,
	0, 1, 1, 1, 1, 2, 2, 2,
	1, 2, 1, 2, 1, 5, 1, 1,
	3, 0, 1, 1, 1, 3, 0, 1,
	1, 1, 3, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 2, 2, 4,
	1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 2, 3, 2, 2, 2,
	3, 3, 3, 5, 2, 3, 2, 3,
	3, 3, 5, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 2, 4,
	1, 2, 1, 0, 0, 1, 1, 1,
	3, 0, 1, 8, 9, 16, 12, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 1, 2, 11, 1,
	1, 2, 11, 0, 0, 7, 0, 0,
	8, 13, 12, 0, 0, 11, 9, 0,
	0, 12, 11, 0, 0, 2, 3, 0,
	1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 1, 3, 1, 1, 3,
	0, 1, 1, 1, 3, 0, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 2, 2, 4, 1,
	2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 2, 3, 2, 2, 2, 3,
	3, 3, 5, 2, 3, 2, 3, 3,
	3, 5, 2, 3, 2, 2, 2, 2,
	1, 1, 1, 2, 2, 2, 4, 1,
	2, 1, 0, 0, 1, 1, 1, 3,
	0, 1, 8, 9, 4, 0, 0
};

static const char _http_parser_range_lengths[] = {
	0, 2, 2, 3, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 8, 8, 0,
	0, 0, 8, 3, 4, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 4,
	3, 3, 3, 3, 3, 3, 1, 3,
	3, 3, 3, 3, 0, 3, 3, 1,
	0, 1, 0, 1, 0, 0, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 0, 1, 0, 3, 3, 0,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 3,
	3, 3, 3, 0, 3, 3, 3, 3,
	0, 3, 3, 3, 3, 0, 3, 3,
	3, 3, 0, 3, 3, 3, 3, 0,
	3, 3, 3, 3, 0, 3, 4, 3,
	3, 3, 0, 3, 3, 3, 3, 0,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 0, 3, 3, 3, 3,
	3, 3, 3, 4, 1, 0, 0, 0,
	4, 3, 3, 4, 4, 4, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 4, 4, 0, 0, 3, 0,
	0, 0, 3, 3, 3, 5, 3, 3,
	5, 3, 3, 3, 3, 5, 4, 3,
	3, 3, 3, 3, 3, 1, 3, 3,
	3, 3, 3, 0, 3, 3, 1, 0,
	1, 0, 1, 0, 0, 1, 1, 0,
	1, 0, 1, 1, 0, 1, 0, 1,
	1, 0, 1, 0, 3, 3, 0, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 3, 3,
	3, 3, 0, 3, 3, 3, 3, 0,
	3, 3, 3, 3, 0, 3, 3, 3,
	3, 0, 3, 3, 3, 3, 0, 3,
	3, 3, 3, 0, 3, 4, 3, 3,
	3, 0, 3, 3, 3, 3, 0, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 0, 3, 3, 3, 3, 3,
	3, 3, 4, 1, 0, 0, 0, 4,
	3, 3, 4, 4, 8, 0, 0
};

static const short _http_parser_index_offsets[] = {
	0, 0, 5, 9, 27, 29, 31, 33,
	35, 37, 39, 41, 43, 46, 60, 73,
	80, 85, 87, 101, 118, 131, 144, 148,
	152, 156, 160, 175, 179, 183, 197, 211,
	215, 219, 235, 254, 272, 276, 280, 299,
	313, 317, 321, 339, 356, 360, 364, 370,
	377, 381, 386, 391, 396, 398, 404, 410,
	414, 416, 420, 422, 426, 428, 434, 437,
	440, 444, 446, 448, 451, 454, 458, 460,
	462, 465, 468, 472, 474, 476, 481, 486,
	488, 492, 497, 502, 507, 513, 519, 525,
	533, 538, 544, 549, 554, 559, 564, 566,
	571, 576, 581, 586, 588, 593, 598, 603,
	608, 610, 615, 620, 625, 630, 632, 637,
	642, 647, 652, 654, 659, 664, 669, 674,
	676, 681, 686, 691, 696, 698, 703, 711,
	718, 724, 730, 733, 739, 746, 752, 758,
	761, 768, 775, 782, 791, 797, 804, 810,
	817, 824, 831, 840, 846, 853, 859, 866,
	873, 879, 884, 889, 891, 897, 903, 909,
	917, 922, 928, 933, 938, 940, 942, 944,
	946, 954, 958, 963, 976, 990, 1011, 1027,
	1031, 1035, 1039, 1043, 1047, 1051, 1055, 1059,
	1063, 1067, 1071, 1075, 1079, 1083, 1087, 1091,
	1095, 1099, 1101, 1106, 1114, 1116, 1119, 1134,
	1136, 1138, 1141, 1156, 1160, 1164, 1177, 1181,
	1185, 1199, 1216, 1232, 1236, 1240, 1257, 1271,
	1275, 1279, 1295, 1310, 1314, 1318, 1322, 1329,
	1333, 1338, 1343, 1348, 1350, 1356, 1362, 1366,
	1368, 1372, 1374, 1378, 1380, 1384, 1387, 1390,
	1394, 1396, 1398, 1401, 1404, 1408, 1410, 1412,
	1415, 1418, 1422, 1424, 1426, 1431, 1436, 1438,
	1442, 1447, 1452, 1457, 1463, 1469, 1475, 1483,
	1488, 1494, 1499, 1504, 1509, 1514, 1516, 1521,
	1526, 1531, 1536, 1538, 1543, 1548, 1553, 1558,
	1560, 1565, 1570, 1575, 1580, 1582, 1587, 1592,
	1597, 1602, 1604, 1609, 1614, 1619, 1624, 1626,
	1631, 1636, 1641, 1646, 1648, 1653, 1661, 1668,
	1674, 1680, 1683, 1689, 1696, 1702, 1708, 1711,
	1718, 1725, 1732, 1741, 1747, 1754, 1760, 1767,
	1774, 1781, 1790, 1796, 1803, 1809, 1816, 1823,
	1829, 1834, 1839, 1841, 1847, 1853, 1859, 1867,
	1872, 1878, 1883, 1888, 1890, 1892, 1894, 1896,
	1904, 1908, 1913, 1926, 1940, 1953, 0
};

static const char _http_parser_trans_cond_spaces[] = {
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 0, -1, 0, 0, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0,
	0, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 0, -1, -1, -1, -1, -1,
	-1, 0, -1, -1, -1, -1, -1, 0,
	-1, -1, -1, -1, -1, -1, 0, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, -1, -1, -1, -1, 0, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, -1,
	-1, -1, -1, 0, -1, -1, -1, -1,
	-1, -1, -1, 0, -1, -1, -1, -1,
	-1, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 0, -1, -1, -1, -1,
	-1, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0,
	0, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, 0, 0, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	0, -1, 0, 0, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, 0, 0, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 0, -1, 0, 0, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 0, -1, 0, 0, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 0, -1,
	0, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 0, -1, 0, 0,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, 0, -1, 0, 0, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 0, -1, -1, -1, -1,
	-1, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0,
	0, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 0, -1, 0, 0, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, 0, 0, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, 0,
	-1, 0, 0, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 0, -1,
	0, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0,
	0, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 0, -1,
	0, 0, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 0, -1, 0,
	0, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, 0, -1, 0, 0,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 0, -1, 0, 0, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 0
};

static const short _http_parser_trans_offsets[] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327,
	328, 329, 330, 331, 332, 333, 334, 335,
	336, 337, 338, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 386, 387, 388, 389, 390, 391,
	392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471,
	472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431,
	1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
	1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 0
};

static const char _http_parser_trans_lengths[] = {
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0
};

static const char _http_parser_cond_keys[] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0,
	1, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0,
	0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1,
	0, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0,
	1, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0,
	1, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0
};

static const short _http_parser_cond_targs[] = {
	194, 198, 2, 2, 0, 3, 175, 175,
	0, 4, 19, 20, 24, 33, 19, 19,
	29, 19, 19, 19, 19, 19, 19, 19,
	173, 173, 0, 5, 0, 6, 0, 7,
	0, 8, 0, 9, 0, 10, 0, 11,
	0, 12, 0, 13, 17, 0, 348, 18,
	14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 0, 14, 15, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14,
	0, 0, 15, 13, 17, 15, 0, 16,
	0, 13, 17, 0, 16, 13, 0, 348,
	14, 15, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 0, 4, 19, 20,
	24, 26, 19, 19, 29, 19, 19, 19,
	19, 19, 19, 19, 19, 0, 4, 22,
	0, 0, 21, 0, 0, 0, 0, 0,
	0, 21, 21, 4, 22, 0, 0, 21,
	0, 0, 0, 0, 0, 0, 21, 21,
	23, 23, 23, 0, 21, 21, 21, 0,
	25, 25, 25, 0, 19, 19, 19, 0,
	4, 0, 20, 27, 0, 0, 29, 26,
	0, 0, 0, 0, 0, 26, 26, 28,
	28, 28, 0, 26, 26, 26, 0, 4,
	0, 20, 31, 0, 0, 30, 0, 0,
	0, 0, 0, 30, 30, 4, 0, 20,
	31, 0, 0, 30, 0, 0, 0, 0,
	0, 30, 30, 32, 32, 32, 0, 30,
	30, 30, 0, 4, 0, 20, 27, 34,
	0, 0, 29, 26, 0, 0, 0, 0,
	0, 26, 26, 4, 35, 20, 36, 26,
	38, 35, 29, 42, 47, 35, 35, 35,
	35, 35, 35, 35, 35, 0, 4, 35,
	20, 36, 26, 38, 35, 29, 42, 35,
	35, 35, 35, 35, 35, 35, 35, 0,
	37, 37, 37, 0, 35, 35, 35, 0,
	4, 39, 20, 40, 26, 39, 29, 42,
	39, 39, 39, 39, 39, 39, 38, 39,
	39, 39, 0, 39, 40, 39, 42, 39,
	39, 39, 39, 39, 39, 39, 39, 39,
	0, 41, 41, 41, 0, 39, 39, 39,
	0, 4, 43, 20, 44, 26, 46, 43,
	29, 47, 43, 43, 43, 43, 43, 43,
	43, 43, 0, 4, 43, 20, 44, 26,
	46, 43, 29, 43, 43, 43, 43, 43,
	43, 43, 43, 0, 45, 45, 45, 0,
	43, 43, 43, 0, 4, 20, 26, 29,
	46, 0, 48, 167, 169, 91, 91, 91,
	0, 49, 49, 49, 0, 53, 50, 50,
	50, 0, 53, 51, 51, 51, 0, 53,
	52, 52, 52, 0, 53, 0, 84, 87,
	54, 90, 90, 0, 55, 80, 77, 77,
	77, 0, 72, 74, 56, 0, 57, 0,
	67, 69, 58, 0, 59, 0, 62, 64,
	60, 0, 61, 0, 4, 20, 26, 46,
	29, 0, 61, 63, 0, 61, 60, 0,
	65, 66, 61, 0, 60, 0, 60, 0,
	59, 68, 0, 59, 58, 0, 59, 70,
	71, 0, 58, 0, 58, 0, 57, 73,
	0, 57, 56, 0, 57, 75, 76, 0,
	56, 0, 56, 0, 80, 78, 78, 78,
	0, 80, 79, 79, 79, 0, 80, 0,
	81, 81, 81, 0, 61, 82, 82, 82,
	0, 61, 83, 83, 83, 0, 61, 60,
	60, 60, 0, 55, 80, 85, 77, 77,
	0, 55, 80, 86, 78, 78, 0, 55,
	80, 79, 79, 79, 0, 55, 88, 89,
	80, 77, 77, 77, 0, 80, 86, 78,
	78, 0, 86, 80, 78, 78, 78, 0,
	80, 77, 77, 77, 0, 95, 92, 92,
	92, 0, 95, 93, 93, 93, 0, 95,
	94, 94, 94, 0, 95, 0, 166, 96,
	96, 96, 0, 100, 97, 97, 97, 0,
	100, 98, 98, 98, 0, 100, 99, 99,
	99, 0, 100, 0, 165, 101, 101, 101,
	0, 105, 102, 102, 102, 0, 105, 103,
	103, 103, 0, 105, 104, 104, 104, 0,
	105, 0, 164, 106, 106, 106, 0, 110,
	107, 107, 107, 0, 110, 108, 108, 108,
	0, 110, 109, 109, 109, 0, 110, 0,
	163, 111, 111, 111, 0, 115, 112, 112,
	112, 0, 115, 113, 113, 113, 0, 115,
	114, 114, 114, 0, 115, 0, 151, 116,
	116, 116, 0, 120, 117, 117, 117, 0,
	120, 118, 118, 118, 0, 120, 119, 119,
	119, 0, 120, 0, 150, 121, 121, 121,
	0, 125, 122, 122, 122, 0, 125, 123,
	123, 123, 0, 125, 124, 124, 124, 0,
	125, 0, 126, 121, 121, 121, 0, 143,
	146, 61, 48, 127, 149, 149, 0, 55,
	131, 61, 128, 128, 128, 0, 131, 61,
	129, 129, 129, 0, 131, 61, 130, 130,
	130, 0, 131, 61, 0, 136, 139, 132,
	142, 142, 0, 55, 80, 61, 133, 133,
	133, 0, 80, 61, 134, 134, 134, 0,
	80, 61, 135, 135, 135, 0, 80, 61,
	0, 55, 80, 61, 137, 133, 133, 0,
	55, 80, 61, 138, 134, 134, 0, 55,
	80, 61, 135, 135, 135, 0, 55, 140,
	141, 80, 61, 133, 133, 133, 0, 80,
	61, 138, 134, 134, 0, 138, 80, 61,
	134, 134, 134, 0, 80, 61, 133, 133,
	133, 0, 55, 131, 61, 144, 128, 128,
	0, 55, 131, 61, 145, 129, 129, 0,
	55, 131, 61, 130, 130, 130, 0, 55,
	147, 148, 131, 61, 128, 128, 128, 0,
	131, 61, 145, 129, 129, 0, 145, 131,
	61, 129, 129, 129, 0, 131, 61, 128,
	128, 128, 0, 143, 146, 48, 127, 149,
	149, 0, 156, 159, 48, 152, 162, 162,
	0, 55, 131, 153, 153, 153, 0, 131,
	154, 154, 154, 0, 131, 155, 155, 155,
	0, 131, 0, 55, 131, 157, 153, 153,
	0, 55, 131, 158, 154, 154, 0, 55,
	131, 155, 155, 155, 0, 55, 160, 161,
	131, 153, 153, 153, 0, 131, 158, 154,
	154, 0, 158, 131, 154, 154, 154, 0,
	131, 153, 153, 153, 0, 48, 49, 49,
	49, 0, 48, 0, 48, 0, 48, 0,
	168, 0, 143, 146, 61, 48, 127, 149,
	149, 0, 170, 170, 170, 0, 171, 170,
	170, 170, 0, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 0,
	172, 172, 172, 61, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 0, 4, 19,
	20, 24, 173, 26, 174, 19, 19, 29,
	19, 19, 19, 19, 19, 19, 19, 173,
	173, 173, 0, 4, 0, 20, 27, 33,
	0, 0, 29, 26, 0, 0, 0, 0,
	0, 26, 26, 3, 176, 176, 0, 3,
	177, 177, 0, 3, 178, 178, 0, 3,
	179, 179, 0, 3, 180, 180, 0, 3,
	181, 181, 0, 3, 182, 182, 0, 3,
	183, 183, 0, 3, 184, 184, 0, 3,
	185, 185, 0, 3, 186, 186, 0, 3,
	187, 187, 0, 3, 188, 188, 0, 3,
	189, 189, 0, 3, 190, 190, 0, 3,
	191, 191, 0, 3, 192, 192, 0, 3,
	193, 193, 0, 3, 0, 195, 195, 195,
	195, 0, 196, 196, 196, 196, 195, 195,
	195, 0, 197, 196, 349, 197, 196, 199,
	202, 203, 208, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 0, 200, 0,
	201, 200, 349, 201, 200, 199, 202, 203,
	205, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 0, 204, 204, 204, 0,
	202, 202, 202, 0, 199, 206, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 205,
	205, 207, 207, 207, 0, 205, 205, 205,
	0, 199, 206, 209, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 199,
	210, 211, 205, 213, 210, 217, 222, 210,
	210, 210, 210, 210, 210, 210, 210, 0,
	199, 210, 211, 205, 213, 210, 217, 210,
	210, 210, 210, 210, 210, 210, 210, 0,
	212, 212, 212, 0, 210, 210, 210, 0,
	199, 214, 215, 205, 214, 217, 214, 214,
	214, 214, 214, 214, 213, 214, 214, 214,
	0, 214, 215, 214, 217, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 0, 216,
	216, 216, 0, 214, 214, 214, 0, 199,
	218, 219, 205, 221, 218, 222, 218, 218,
	218, 218, 218, 218, 218, 218, 0, 199,
	218, 219, 205, 221, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 0, 220, 220,
	220, 0, 218, 218, 218, 0, 199, 205,
	221, 0, 223, 342, 344, 266, 266, 266,
	0, 224, 224, 224, 0, 228, 225, 225,
	225, 0, 228, 226, 226, 226, 0, 228,
	227, 227, 227, 0, 228, 0, 259, 262,
	229, 265, 265, 0, 230, 255, 252, 252,
	252, 0, 247, 249, 231, 0, 232, 0,
	242, 244, 233, 0, 234, 0, 237, 239,
	235, 0, 236, 0, 199, 205, 221, 0,
	236, 238, 0, 236, 235, 0, 240, 241,
	236, 0, 235, 0, 235, 0, 234, 243,
	0, 234, 233, 0, 234, 245, 246, 0,
	233, 0, 233, 0, 232, 248, 0, 232,
	231, 0, 232, 250, 251, 0, 231, 0,
	231, 0, 255, 253, 253, 253, 0, 255,
	254, 254, 254, 0, 255, 0, 256, 256,
	256, 0, 236, 257, 257, 257, 0, 236,
	258, 258, 258, 0, 236, 235, 235, 235,
	0, 230, 255, 260, 252, 252, 0, 230,
	255, 261, 253, 253, 0, 230, 255, 254,
	254, 254, 0, 230, 263, 264, 255, 252,
	252, 252, 0, 255, 261, 253, 253, 0,
	261, 255, 253, 253, 253, 0, 255, 252,
	252, 252, 0, 270, 267, 267, 267, 0,
	270, 268, 268, 268, 0, 270, 269, 269,
	269, 0, 270, 0, 341, 271, 271, 271,
	0, 275, 272, 272, 272, 0, 275, 273,
	273, 273, 0, 275, 274, 274, 274, 0,
	275, 0, 340, 276, 276, 276, 0, 280,
	277, 277, 277, 0, 280, 278, 278, 278,
	0, 280, 279, 279, 279, 0, 280, 0,
	339, 281, 281, 281, 0, 285, 282, 282,
	282, 0, 285, 283, 283, 283, 0, 285,
	284, 284, 284, 0, 285, 0, 338, 286,
	286, 286, 0, 290, 287, 287, 287, 0,
	290, 288, 288, 288, 0, 290, 289, 289,
	289, 0, 290, 0, 326, 291, 291, 291,
	0, 295, 292, 292, 292, 0, 295, 293,
	293, 293, 0, 295, 294, 294, 294, 0,
	295, 0, 325, 296, 296, 296, 0, 300,
	297, 297, 297, 0, 300, 298, 298, 298,
	0, 300, 299, 299, 299, 0, 300, 0,
	301, 296, 296, 296, 0, 318, 321, 236,
	223, 302, 324, 324, 0, 230, 306, 236,
	303, 303, 303, 0, 306, 236, 304, 304,
	304, 0, 306, 236, 305, 305, 305, 0,
	306, 236, 0, 311, 314, 307, 317, 317,
	0, 230, 255, 236, 308, 308, 308, 0,
	255, 236, 309, 309, 309, 0, 255, 236,
	310, 310, 310, 0, 255, 236, 0, 230,
	255, 236, 312, 308, 308, 0, 230, 255,
	236, 313, 309, 309, 0, 230, 255, 236,
	310, 310, 310, 0, 230, 315, 316, 255,
	236, 308, 308, 308, 0, 255, 236, 313,
	309, 309, 0, 313, 255, 236, 309, 309,
	309, 0, 255, 236, 308, 308, 308, 0,
	230, 306, 236, 319, 303, 303, 0, 230,
	306, 236, 320, 304, 304, 0, 230, 306,
	236, 305, 305, 305, 0, 230, 322, 323,
	306, 236, 303, 303, 303, 0, 306, 236,
	320, 304, 304, 0, 320, 306, 236, 304,
	304, 304, 0, 306, 236, 303, 303, 303,
	0, 318, 321, 223, 302, 324, 324, 0,
	331, 334, 223, 327, 337, 337, 0, 230,
	306, 328, 328, 328, 0, 306, 329, 329,
	329, 0, 306, 330, 330, 330, 0, 306,
	0, 230, 306, 332, 328, 328, 0, 230,
	306, 333, 329, 329, 0, 230, 306, 330,
	330, 330, 0, 230, 335, 336, 306, 328,
	328, 328, 0, 306, 333, 329, 329, 0,
	333, 306, 329, 329, 329, 0, 306, 328,
	328, 328, 0, 223, 224, 224, 224, 0,
	223, 0, 223, 0, 223, 0, 343, 0,
	318, 321, 236, 223, 302, 324, 324, 0,
	345, 345, 345, 0, 346, 345, 345, 345,
	0, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 0, 347, 347,
	347, 236, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 0, 14, 15, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14,
	0, 0, 0
};

static const char _http_parser_cond_actions[] = {
	1, 1, 1, 1, 0, 11, 0, 0,
	0, 47, 1, 47, 1, 1, 1, 1,
	26, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 17, 17, 0, 29, 3,
	3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 7, 32, 32, 7, 0, 7,
	0, 9, 9, 0, 0, 0, 0, 21,
	0, 5, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 38,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 1,
	0, 0, 1, 0, 0, 0, 0, 0,
	0, 1, 1, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 38, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51,
	0, 51, 15, 0, 0, 15, 0, 0,
	0, 0, 0, 15, 15, 35, 0, 35,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 38, 0, 0,
	0, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 38, 0, 0,
	0, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0,
	38, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 38, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 38, 0, 0, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 38, 0, 0,
	0, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 38, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 38, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0,
	38, 0, 0, 0, 0, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 47, 1, 1,
	0, 0, 26, 1, 0, 0, 0, 0,
	0, 1, 1, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 11,
	0, 0, 0, 11, 0, 0, 0, 0,
	0, 0, 19, 19, 19, 19, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 0,
	0, 0, 44, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0
};

static const char _http_parser_nfa_targs[] = {
	0, 0
};

static const char _http_parser_nfa_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0
};

static const char _http_parser_nfa_push_actions[] = {
	0, 0
};

static const char _http_parser_nfa_pop_trans[] = {
	0, 0
};

static const int http_parser_start = 1;
static const int http_parser_first_final = 348;
static const int http_parser_error = 0;

static const int http_parser_en_main = 1;


#line 261 "http11_parser.rl"


int http_parser_init(http_parser *parser) {
	int cs = 0;
	
	{
		cs = (int)http_parser_start;
	}
	
	#line 265 "http11_parser.rl"
	
	parser->cs = cs;
	parser->body_start = 0;
	parser->content_len = 0;
	parser->mark = 0;
	parser->nread = 0;
	parser->field_len = 0;
	parser->field_start = 0;
	parser->xml_sent = 0;
	parser->json_sent = 0;
	
	return(1);
}


/** exec **/
size_t http_parser_execute(http_parser *parser, const char *buffer, size_t len, size_t off)  
{
	if(len == 0) return 0;
	parser->nread = 0;
	parser->mark = 0;
	parser->field_len = 0;
	parser->field_start = 0;
	
	const char *p, *pe;
	int cs = parser->cs;
	
	assert(off <= len && "offset past end of buffer");
	
	p = buffer+off;
	pe = buffer+len;
	
	assert(pe - p == (int)len - (int)off && "pointers aren't same distance");
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char *_acts;
		unsigned int _nacts;
		const char *_keys;
		const char *_ckeys;
		int _cpc;
		{
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			_resume:  {
				_keys = ( _http_parser_trans_keys + (_http_parser_key_offsets[cs]));
				_trans = (unsigned int)_http_parser_index_offsets[cs];
				
				_klen = (int)_http_parser_single_lengths[cs];
				if ( _klen > 0 ) {
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( (*( p))) < (*( _mid)) )
						_upper = _mid - 1;
						else if ( ( (*( p))) > (*( _mid)) )
						_lower = _mid + 1;
						else {
							_trans += (unsigned int)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += (unsigned int)_klen;
				}
				
				_klen = (int)_http_parser_range_lengths[cs];
				if ( _klen > 0 ) {
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( (*( p))) < (*( _mid)) )
						_upper = _mid - 2;
						else if ( ( (*( p))) > (*( _mid + 1)) )
						_lower = _mid + 2;
						else {
							_trans += (unsigned int)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += (unsigned int)_klen;
				}
				
			}
			_match:  {
				_ckeys = ( _http_parser_cond_keys + (_http_parser_trans_offsets[_trans]));
				_klen = (int)_http_parser_trans_lengths[_trans];
				_cond = (unsigned int)_http_parser_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _http_parser_trans_cond_spaces[_trans] ) {
					
					case 0:  {
						if ( ( parser->uri_relaxed ) ) _cpc += 1;
						break; }
				}
				{
					const char *_lower;
					const char *_mid;
					const char *_upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( 1 ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < (int)(*( _mid)) )
						_upper = _mid - 1;
						else if ( _cpc > (int)(*( _mid)) )
						_lower = _mid + 1;
						else {
							_cond += (unsigned int)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			_match_cond:  {
				cs = (int)_http_parser_cond_targs[_cond];
				
				if ( _http_parser_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = ( _http_parser_actions + (_http_parser_cond_actions[_cond]));
				_nacts = (unsigned int)(*( _acts));
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( (*( _acts)) )
					{
						case 0:  {
							{
								#line 53 "http11_parser.rl"
								MARK(mark, p); }
							break; }
						case 1:  {
							{
								#line 56 "http11_parser.rl"
								MARK(field_start, p); }
							break; }
						case 2:  {
							{
								#line 57 "http11_parser.rl"
								
								parser->field_len = LEN(field_start, p);
							}
							break; }
						case 3:  {
							{
								#line 61 "http11_parser.rl"
								MARK(mark, p); }
							break; }
						case 4:  {
							{
								#line 63 "http11_parser.rl"
								
								if(parser->http_field != NULL) {
									parser->http_field(parser->data, PTR_TO(field_start), parser->field_len, PTR_TO(mark), LEN(mark, p));
								}
							}
							break; }
						case 5:  {
							{
								#line 69 "http11_parser.rl"
								
								if(parser->request_method != NULL) 
								parser->request_method(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 6:  {
							{
								#line 74 "http11_parser.rl"
								
								if(parser->request_uri != NULL)
								parser->request_uri(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 7:  {
							{
								#line 79 "http11_parser.rl"
								
								if(parser->fragment != NULL)
								parser->fragment(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 8:  {
							{
								#line 84 "http11_parser.rl"
								MARK(query_start, p); }
							break; }
						case 9:  {
							{
								#line 85 "http11_parser.rl"
								
								if(parser->query_string != NULL)
								parser->query_string(parser->data, PTR_TO(query_start), LEN(query_start, p));
							}
							break; }
						case 10:  {
							{
								#line 90 "http11_parser.rl"
								
								if(parser->http_version != NULL)
								parser->http_version(parser->data, PTR_TO(mark), LEN(mark, p));
							}
							break; }
						case 11:  {
							{
								#line 95 "http11_parser.rl"
								
								if(parser->request_path != NULL)
								parser->request_path(parser->data, PTR_TO(mark), LEN(mark,p));
							}
							break; }
						case 12:  {
							{
								#line 100 "http11_parser.rl"
								
								if(parser->xml_sent || parser->json_sent) {
									parser->body_start = PTR_TO(mark) - buffer;
									// +1 includes the \0
									parser->content_len = p - buffer - parser->body_start + 1;
								} else {
									parser->body_start = p - buffer + 1;
									
									if(parser->header_done != NULL) {
										parser->header_done(parser->data, p + 1, pe - p - 1);
									}
								}
								{p+= 1; goto _out; }
							}
							break; }
						case 13:  {
							{
								#line 115 "http11_parser.rl"
								
								parser->xml_sent = 1;
							}
							break; }
						case 14:  {
							{
								#line 119 "http11_parser.rl"
								
								parser->json_sent = 1;
							}
							break; }
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			_again:  {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			_test_eof:  { {}
			}
			_out:  { {}
			}
		}
	}
	
	#line 299 "http11_parser.rl"
	
	
	assert(p <= pe && "Buffer overflow after parsing.");
	
	if (!http_parser_has_error(parser)) {
		parser->cs = cs;
	}
	
	parser->nread += p - (buffer + off);
	
	assert(parser->nread <= len && "nread longer than length");
	assert(parser->body_start <= len && "body starts after buffer end");
	assert(parser->mark < len && "mark is after buffer end");
	assert(parser->field_len <= len && "field has length longer than whole buffer");
	assert(parser->field_start < len && "field starts after buffer end");
	
	return(parser->nread);
}

int http_parser_finish(http_parser *parser)
{
	if (http_parser_has_error(parser) ) {
		return -1;
	} else if (http_parser_is_finished(parser) ) {
		return 1;
	} else {
		return 0;
	}
}

int http_parser_has_error(http_parser *parser) {
	return parser->cs == http_parser_error;
}

int http_parser_is_finished(http_parser *parser) {
	return parser->cs >= http_parser_first_final;
}
